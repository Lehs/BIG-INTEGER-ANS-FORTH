: bpick \ bn ... b0 -- bn ... b0 bm | m -- 
  dup nth swap len# bpusha ;

: xnth ( n -- b/0 )  1+ xp @ swap cells + 
  dup x0 = if drop 0 else @ then ; 

: xlen# \ n -- m 
  dup xnth swap 1- xnth ?dup
  if swap else x$0 swap then - ; 

: bxpick \ xn ... x0 -- xn ... x0 xm | m --
  dup xnth swap xlen# bpusha ;

: #>bx \ bn ... b0 -- bn ... bm  x: -- bm-1 ... b0 | m --
  0 do >bx loop ;

: #bx> \ -- bm-1 ... b0  x: bm-1 ... b0 -- | m --
  0 do bx> loop ;

\ extra stacks for singel numbers

: clst ( ad -- )  dup ! ;
: stdrops ( m ad -- )  swap cells negate swap +! ; 
: stdrop ( ad -- ) -cell swap +! ;
: >st ( n ad -- )  cell over +! @ ! ;
: st> ( ad -- n )  dup @ @ -cell rot +! ;
: >st> ( n ad -- m )  dup @ @ -rot @ ! ;
: st@ ( ad -- n )  @ @ ;
: st! ( n ad -- )  @ ! ;
: st+! ( n ad -- )  @ +! ;
: stpick ( m ad -- xm )  @ swap cells - @ ;
: stpatch ( n m ad -- )  @ swap cells - ! ;
: stpatad ( n m ad -- )  @ swap cells - +! ;
: stdepth ( ad -- n )  dup @ swap - lcell rshift ;

: .st \ ad -- 
  dup @ cell+ swap cell+
  ?do i @ . cell
  +loop ;

: >st# \ xn ... x1 n ad -- 
  swap 0
  ?do cell over +! swap over @ !
  loop drop ;

: stack \ size --         \ i.e. '128 stack alpha' and then 'alpha .st' etc
  allocate throw dup constant clst ;
